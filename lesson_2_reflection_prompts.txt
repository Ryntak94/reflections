What happens when you initialize a repository? Why do you need to do it?

  You need to add it to the commit then you need to commit it for the first time.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

  The working directory includes all of the related files. However, the staging
  area is the collection of files that you wish to include to your commit.

How can you use the staging area to make sure you have one commit per logical
change?

  I can make sure to only add items to the staging area once they are ready to
  be committed.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  When you want to test out a new feature or version that you don't want to be
  required to commit to the master branch when you finalize changes before you
  want to merge with the master branch.

How do the diagrams help you visualize the branch structure?

  The diagrams help you know when different branches were made and at what point
  things started to differ.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

  it creates a new commit that is a combination of the two branches. We
  represent it the way that we do because it is a clear representation of how
  things change along two branches and how they merge together when they finally
  do.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

  Well a pro is not having to manually go through line by line and to merge
  files which could take hours or days, potentially. A con is that you could
  run into merge conflicts. Even so, that is outweighed by the pros. Especially
  since the way you go about conflict resolution is fairly efficient.
